local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")
local TweenService = game:GetService("TweenService")
local StarterGui = game:GetService("StarterGui")
local Players = game:GetService("Players")
local Camera = game:GetService("Workspace").CurrentCamera
local worldtoviewportpoint = Camera.WorldToViewportPoint



if getgenv().Aimbot then return end

loadstring(game:HttpGet("https://raw.githubusercontent.com/DripCat/drippycheat.exe/main/UWUWUWUWU"))()

local Aimbot = getgenv().Aimbot
local Settings, FOVSettings, Functions = Aimbot.Settings, Aimbot.FOVSettings, Aimbot.Functions

local Sense = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Sirius/request/library/sense/source.lua'))()


Sense.teamSettings.enemy.enabled = true







local ScreenGui = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local Frame_2 = Instance.new("Frame")
local TextLabel = Instance.new("TextLabel")


ScreenGui.Parent = game:WaitForChild("CoreGui")
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
Frame.BorderColor3 = Color3.fromRGB(27, 42, 53)
Frame.Position = UDim2.new(0.0657785162, 0, 0.0353658646, 0)
Frame.Size = UDim2.new(0, 207, 0, 29)

Frame_2.Parent = Frame
Frame_2.BackgroundColor3 = Color3.fromRGB(19, 31, 55)
Frame_2.Position = UDim2.new(0, 0, -4.76837158e-07, 0)
Frame_2.Size = UDim2.new(0, 207, 0, 4)

TextLabel.Parent = ScreenGui
TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.BackgroundTransparency = 1.000
TextLabel.Position = UDim2.new(0.0732722729, 0, 0.0439024568, 0)
TextLabel.Size = UDim2.new(0, 188, 0, 14)
TextLabel.Font = Enum.Font.Arial
TextLabel.Text = "Nightmare.hook | Counterblox  | Private"
TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.TextScaled = true
TextLabel.TextSize = 14.000
TextLabel.TextWrapped = true


local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/vozoid/ui-libraries/main/drawing/void/source.lua"))()



local main = library:Load{
   Name = "Nightmare.hook | Counterblox",
   SizeX = 600,
   SizeY = 650,
   Theme = "Midnight",
   Extension = "json", 
   Folder = "Nightmare.hook_CB"
}

local tab = main:Tab("Aim")

local section = tab:Section{
   Name = "Aimbot",
   Side = "Left"
}


local toggle = section:Toggle{
    Name = "Aimbot",
    Flag = "Aimbot_Toggle",
    Default = false,
    Callback  = function(bool)
        if bool then
            Settings.Enabled = true 
        else
            Settings.Enabled = false
            
        end
    end

}

local toggle2 = section:Toggle{
    Name = "Wallcheck",
    Flag = "Wallcheck_Toggle",
    Default = false,
    Callback  = function(bool)
        if bool then
            Settings.WallCheck = true
        else
            Settings.WallCheck = false
    end
end
}


local toggle3 = section:Toggle{
    Name = "teamcheck",
    Flag = "teamcheck_Toggle",
    Default = false,
    Callback  = function(bool)
        if bool then
            Settings.TeamCheck = true
        else
            Settings.TeamCheck = false
    end
end
}

local toggle4 = section:Toggle{
    Name = "Alive Check",
    Flag = "AliveCheck_Toggle",
    Default = false,
    Callback  = function(bool)
        if bool then
            Settings.AliveCheck = true
        else
            Settings.AliveCheck = false
    end
end
}


local toggle5 = section:Toggle{
    Name = "Use Fov",
    Flag = "UseFov_Toggle",
    Default = false,
    Callback  = function(bool)
        if bool then
            FOVSettings.Visible = true
        else
            FOVSettings.Visible = false
        end
    end
}


local slider = section:Slider{
    Name = "Fov size",
    Text = "",
    Min = 10,
    Max = 300,
    Float = 0.1,
    Flag = "Slider 1",
    Callback = function(value)
        FOVSettings.Amount = value
    end
}


local dropdown = section:Dropdown{
    Name = "Aim Part",
    Default = "Head",
    Content = {
        "Head",
        "HumanoidRootPart"
    },
    Flag = "Aim_Part",
    Callback = function(option)
        Settings.LockPart = option
    end
}




local section2 = tab:Section{
   Name = "Silent aim",
   Side = "right"
}


local toggle = section2:Toggle{
    Name = "Silent Aim",
    Flag = "SilentAim_Toggle",
    Default = false,
    Callback  = function(bool)
        
    end
}








local section3 = tab:Section{
    Name = "Aimbot settings",
    Side = "left"
 }

 local colorpicker = section3:ColorPicker{
    Name = "Aimbot Fov color",
    Default = Color3.fromRGB(255, 255, 255),
    Flag = "AimbotFovColor",
    Callback = function(color)
        FOVSettings.Color = color
    end
}


 



 local tab = main:Tab("Rage")


 
 
 local section = tab:Section{
    Name = "Rage",
    Side = "Left"
 }


 local section2 = tab:Section{
    Name = "Anti Aim",
    Side = "right"
 }

 
 
 local tab = main:Tab("Esp")

 local section = tab:Section{
    Name = "Esp",
    Side = "Left"
 }


 
local toggle = section:Toggle{
    Name = "Box",
    Flag = "BoxEsp_Toggle",
    Default = false,
    Callback  = function(bool)
        if bool then
            Sense.teamSettings.enemy.box = true
        else
            Sense.teamSettings.enemy.box = false
    end
end
}

local toggle2 = section:Toggle{
    Name = "Name",
    Flag = "NameEsp_Toggle",
    Default = false,
    Callback  = function(bool)
        if bool then
            Sense.teamSettings.enemy.name = true
        else
            Sense.teamSettings.enemy.name = false
    end
end
}


local toggle3 = section:Toggle{
    Name = "healthBar",
    Flag = "healthBarEsp_Toggle",
    Default = false,
    Callback  = function(bool)
        if bool then
            Sense.teamSettings.enemy.healthBar = true
        else
            Sense.teamSettings.enemy.healthBar = false
    end
end
}


local toggle3 = section:Toggle{
    Name = "tracers",
    Flag = "tracerEsp_Toggle",
    Default = false,
    Callback  = function(bool)
        if bool then
            Sense.teamSettings.enemy.tracer = true
        else
            Sense.teamSettings.enemy.tracer = false
    end
end
}


local toggle4 = section:Toggle{
    Name = "Chams",
    Flag = "chamsEsp_Toggle",
    Default = false,
    Callback  = function(bool)
        if bool then
            Sense.teamSettings.enemy.chams = true
        else
            Sense.teamSettings.enemy.chams = false
    end
end
}












 local section2 = tab:Section{
    Name = "Esp Settings",
    Side = "Left"
 }


 local colorpicker = section2:ColorPicker{
    Name = "Box Esp Color",
    Flag = "BoxEsp_Color",
    Callback = function(color)
        Sense.teamSettings.enemy.boxColor[1] = color
    end
}


local colorpicker2 = section2:ColorPicker{
    Name = "Name Esp Color",
    Flag = "NameEsp_Color",
    Callback = function(color)
        Sense.teamSettings.enemy.nameColor[1] = color
    end
}




local colorpicker3 = section2:ColorPicker{
    Name = "tracer Esp Color",
    Flag = "tracerEsp_Color",
    Callback = function(color)
        Sense.teamSettings.enemy.tracerColor[1] = color
    end
}


local colorpicker4 = section2:ColorPicker{
    Name = "Chams Color",
    Flag = "Chams_Color",
    Callback = function(color)
        Sense.teamSettings.enemy.chamsOutlineColor[1] = color
    end
}

 
 
 local tab = main:Tab("Visuals")

 local section = tab:Section{
    Name = "Player Visuals",
    Side = "Left"
 }

 local section2 = tab:Section{
    Name = "World Visuals",
    Side = "right"
 }


 local section3 = tab:Section{
    Name = "Viewmodel",
    Side = "Left"
 }


 


 local section4 = tab:Section{
    Name = "Visuals Settings",
    Side = "right"
 }




 local tab = main:Tab("Misc")

 local section = tab:Section{
    Name = "Gun Mods",
    Side = "Left"
 }











 
local configs = main:Tab("Configuration")

local themes = configs:Section{Name = "Theme", Side = "Left"}

local themepickers = {}

local themelist = themes:Dropdown{
    Name = "Theme",
    Default = library.currenttheme,
    Content = library:GetThemes(),
    Flag = "Theme Dropdown",
    Callback = function(option)
        if option then
            library:SetTheme(option)

            for option, picker in next, themepickers do
                picker:Set(library.theme[option])
            end
        end
    end
}

library:ConfigIgnore("Theme Dropdown")

local namebox = themes:Box{
    Name = "Custom Theme Name",
    Placeholder = "Custom Theme",
    Flag = "Custom Theme"
}

library:ConfigIgnore("Custom Theme")

themes:Button{
    Name = "Save Custom Theme",
    Callback = function()
        if library:SaveCustomTheme(library.flags["Custom Theme"]) then
            themelist:Refresh(library:GetThemes())
            themelist:Set(library.flags["Custom Theme"])
            namebox:Set("")
        end
    end
}

local customtheme = configs:Section{Name = "Custom Theme", Side = "Right"}

themepickers["Accent"] = customtheme:ColorPicker{
    Name = "Accent",
    Default = library.theme["Accent"],
    Flag = "Accent",
    Callback = function(color)
        library:ChangeThemeOption("Accent", color)
    end
}

library:ConfigIgnore("Accent")

themepickers["Window Background"] = customtheme:ColorPicker{
    Name = "Window Background",
    Default = library.theme["Window Background"],
    Flag = "Window Background",
    Callback = function(color)
        library:ChangeThemeOption("Window Background", color)
    end
}

library:ConfigIgnore("Window Background")

themepickers["Window Border"] = customtheme:ColorPicker{
    Name = "Window Border",
    Default = library.theme["Window Border"],
    Flag = "Window Border",
    Callback = function(color)
        library:ChangeThemeOption("Window Border", color)
    end
}

library:ConfigIgnore("Window Border")

themepickers["Tab Background"] = customtheme:ColorPicker{
    Name = "Tab Background",
    Default = library.theme["Tab Background"],
    Flag = "Tab Background",
    Callback = function(color)
        library:ChangeThemeOption("Tab Background", color)
    end
}

library:ConfigIgnore("Tab Background")

themepickers["Tab Border"] = customtheme:ColorPicker{
    Name = "Tab Border",
    Default = library.theme["Tab Border"],
    Flag = "Tab Border",
    Callback = function(color)
        library:ChangeThemeOption("Tab Border", color)
    end
}

library:ConfigIgnore("Tab Border")

themepickers["Tab Toggle Background"] = customtheme:ColorPicker{
    Name = "Tab Toggle Background",
    Default = library.theme["Tab Toggle Background"],
    Flag = "Tab Toggle Background",
    Callback = function(color)
        library:ChangeThemeOption("Tab Toggle Background", color)
    end
}

library:ConfigIgnore("Tab Toggle Background")

themepickers["Section Background"] = customtheme:ColorPicker{
    Name = "Section Background",
    Default = library.theme["Section Background"],
    Flag = "Section Background",
    Callback = function(color)
        library:ChangeThemeOption("Section Background", color)
    end
}

library:ConfigIgnore("Section Background")

themepickers["Section Border"] = customtheme:ColorPicker{
    Name = "Section Border",
    Default = library.theme["Section Border"],
    Flag = "Section Border",
    Callback = function(color)
        library:ChangeThemeOption("Section Border", color)
    end
}

library:ConfigIgnore("Section Border")

themepickers["Text"] = customtheme:ColorPicker{
    Name = "Text",
    Default = library.theme["Text"],
    Flag = "Text",
    Callback = function(color)
        library:ChangeThemeOption("Text", color)
    end
}

library:ConfigIgnore("Text")

themepickers["Disabled Text"] = customtheme:ColorPicker{
    Name = "Disabled Text",
    Default = library.theme["Disabled Text"],
    Flag = "Disabled Text",
    Callback = function(color)
        library:ChangeThemeOption("Disabled Text", color)
    end
}

library:ConfigIgnore("Disabled Text")

themepickers["Object Background"] = customtheme:ColorPicker{
    Name = "Object Background",
    Default = library.theme["Object Background"],
    Flag = "Object Background",
    Callback = function(color)
        library:ChangeThemeOption("Object Background", color)
    end
}

library:ConfigIgnore("Object Background")

themepickers["Object Border"] = customtheme:ColorPicker{
    Name = "Object Border",
    Default = library.theme["Object Border"],
    Flag = "Object Border",
    Callback = function(color)
        library:ChangeThemeOption("Object Border", color)
    end
}

library:ConfigIgnore("Object Border")

themepickers["Dropdown Option Background"] = customtheme:ColorPicker{
    Name = "Dropdown Option Background",
    Default = library.theme["Dropdown Option Background"],
    Flag = "Dropdown Option Background",
    Callback = function(color)
        library:ChangeThemeOption("Dropdown Option Background", color)
    end
}

library:ConfigIgnore("Dropdown Option Background")

local configsection = configs:Section{Name = "Configs", Side = "Left"}

local configlist = configsection:Dropdown{
    Name = "Configs",
    Content = library:GetConfigs(), -- GetConfigs(true) if you want universal configs
    Flag = "Config Dropdown"
}

library:ConfigIgnore("Config Dropdown")

local loadconfig = configsection:Button{
    Name = "Load Config",
    Callback = function()
        library:LoadConfig(library.flags["Config Dropdown"]) -- LoadConfig(library.flags["Config Dropdown"], true)  if you want universal configs
    end
}

local delconfig = configsection:Button{
    Name = "Delete Config",
    Callback = function()
        library:DeleteConfig(library.flags["Config Dropdown"]) -- DeleteConfig(library.flags["Config Dropdown"], true)  if you want universal configs
        configlist:Refresh(library:GetConfigs())
    end
}


local configbox = configsection:Box{
    Name = "Config Name",
    Placeholder = "Config Name",
    Flag = "Config Name"
}

library:ConfigIgnore("Config Name")

local save = configsection:Button{
    Name = "Save Config",
    Callback = function()
        library:SaveConfig(library.flags["Config Dropdown"] or library.flags["Config Name"]) -- SaveConfig(library.flags["Config Name"], true) if you want universal configs
        configlist:Refresh(library:GetConfigs())
    end
}

local keybindsection = configs:Section{Name = "UI Toggle Keybind", Side = "Left"}

keybindsection:Keybind{
    Name = "UI Toggle",
    Flag = "UI Toggle",
    Default = Enum.KeyCode.RightShift,
    Blacklist = {Enum.UserInputType.MouseButton1, Enum.UserInputType.MouseButton2, Enum.UserInputType.MouseButton3},
    Callback = function(_, fromsetting)
        if not fromsetting then
            library:Close()
        end
    end
}


Sense.Load()
